@page "/Aportes/Index"
@rendermode InteractiveServer
@inject AportesServices aporteService
@inject NavigationManager navigationManager

<PageTitle>Index</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <div class="card-header space-between">
            <h5 class="card-title">Registro de Aportes</h5>
            <a href="/Aportes/Create" class="btn btn-success"> <span class="bi bi-plus-square mt-3"></span> Crear</a>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                <div class="col-4">
                    <label class="col-form-label"><strong>Búsqueda</strong></label>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" selected disabled>Elija una opción</option>
                        <option value="Persona">Persona</option>
                        <option value="Fecha">Fecha</option>
                    </InputSelect>
                </div>

                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-success bi bi-search" @onclick="Buscar"></button>
                    </div>
                </div>
            </div>

            <table class="table table-hover table-bordered text-center">
                <thead class="table  table-striped text-black">
                    <tr>
                        <th>AportesId</th>
                        <th>Fecha</th>
                        <th>Persona</th>
                        <th>Monto</th>
                        <th>Ver</th>
                        <th>Modificar</th>
                        <th>Eliminar</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var aporte in ListaAportes)
                    {
                        <tr>
                            <td>@aporte.AporteId</td>
                            <td>@aporte.Fecha.ToShortDateString()</td>
                            <td>@aporte.Persona</td>
                            <td>@aporte.Monto.ToString("C")</td>
                            <td>
                                <a href="/Aportes/Details/@aporte.AporteId" class="btn btn-outline-primary bi bi-eye"></a>
                            </td>
                            <td>
                                <a href="/Aportes/Edit/@aporte.AporteId" class="btn btn-outline-info bi bi-pencil-square"></a>
                            </td>
                            <td>
                                <a href="/Aportes/Delete/@aporte.AporteId" class="btn btn-outline-danger bi bi-trash"></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="card-footer space-between">
            <label>Cantidad: @ListaAportes.Count()</label>
            <label>Total: @ListaAportes.Sum(p => p.Monto).ToString("C")</label>
        </div>
    </div>
</div>

@code {
    public List<Aportes> ListaAportes { get; set; } = new List<Aportes>();
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ListaAportes = await aporteService.Listar(c => c.AporteId > 0);
    }

    private async Task Buscar()
    {
        if (!string.IsNullOrWhiteSpace(ValorFiltro))
        {
            if (Filtro == "Persona")
            {
                ListaAportes = await aporteService.Listar(p => p.Persona.ToLower().Contains(ValorFiltro.ToLower()));
            }
            else if (Filtro == "Fecha" && DateTime.TryParse(ValorFiltro, out var fecha))
            {
                ListaAportes = await aporteService.Listar(p => p.Fecha.Date == fecha.Date);
            }
        }
        else
        {
            ListaAportes = await aporteService.Listar(p => p.AporteId > 0);
        }
    }

    private async Task Restablecer()
    {
        ListaAportes = await aporteService.Listar(e => e.AporteId > 0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }
}